/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BAS 0
/* #define NAV 1 */
/* #define NUM 2 */
/* #define SYM 3 */
/* #define FUN 4 */

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */


&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
  quick_tap_ms = <75>;
};

/ {
	behaviors {
		mod_minus: custom_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    	mod_slash: custom_slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    	mod_dot: custom_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COMMA>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
};

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &mod_minus    &mod_slash    &mod_dot     &kp P        &kp Y         &kp F          &kp G        &kp C        &kp R        &kp L
            &kp A         &kp O         &kp E        &kp U        &kp I         &kp D          &kp H        &kp T        &kp N        &kp S
            &kp ESC       &kp Q         &kp J        &kp K        &kp X         &kp B          &kp M        &kp W        &kp V        &kp Z
            &kp LSHIFT    &kp LCTRL     &kp LALT     &kp LGUI     &kp SPACE     &kp ENTER      &kp RGUI     &kp RALT     &kp RCTRL    &kp RSHIFT
                                                                  &kp TAB       &kp BSPC
            >;
        };
            /* &kp LSHIFT    &kp LCTRL     &kp LALT     &kp LGUI     &lt SYM SPACE &lt NAV ENTER  &kp RGUI     &kp RALT     &kp RCTRL    &kp RSHIFT */
            /*                                                       &lt FUN TAB   &lt NUM BSPC */

        /* navigation_layer { */
        /*     bindings = < */
        /*     &trans        &trans        &trans       &trans       &trans        &trans         &trans       &trans       &trans       &kp RIGHT */
        /*     &kp LSHIFT    &kp LCTRL     &kp LALT     &trans       &kp LGUI      &kp LT         &kp LEFT     &kp LPAR     &kp LBRC     &kp LBKT */
        /*     &trans        &trans        &kp DOWN     &kp UP       &trans        &kp GT         &trans       &kp RPAR     &kp RBRC     &kp RBKT */
        /*                                              &kp TAB      &kp SPACE     &kp ENTER      &trans */
        /*     >; */
        /* }; */
        /* numerical_layer { */
        /*     bindings = < */
        /*     &trans        &trans        &trans       &trans       &trans        &trans         &kp N7       &kp N8       &kp N9       &trans */
        /*     &kp LSHIFT    &kp LCTRL     &kp LALT     &trans       &kp LGUI      &kp KP_EQUAL   &kp N4       &kp N5       &kp N6       &kp KP_PLUS */
        /*     &trans        &trans        &trans       &trans       &trans        &kp N0         &kp N1       &kp N2       &kp N3       &trans */
        /*                                              &kp TAB      &kp SPACE     &trans         &kp BSPC */
        /*     >; */
        /* }; */
        /* symbols_layer { */
        /*     bindings = < */
        /*     &kp BSLH      &kp AMPS      &kp STAR     &kp TILDE    &kp GRAVE     &trans         &trans       &trans       &trans       &trans */
        /*     &kp PIPE      &kp DLLR      &kp PRCNT    &kp CARET    &kp SQT       &kp RGUI       &kp SEMI     &kp RALT     &kp RCTRL    &kp RSHIFT */
        /*     &kp QMARK     &kp EXCL      &kp AT       &kp HASH     &kp DQT       &trans         &trans       &trans       &trans       &trans */
        /*                                              &trans       &kp SPACE     &kp ENTER      &kp BSPC */
        /*     >; */
        /* }; */
        /* functional_layer { */
        /*     bindings = < */
        /*     &kp F10        &kp F7       &kp F8       &kp F9       &trans        &bt BT_CLR     &trans       &trans       &trans       &trans */
        /*     &mt LSHIFT F11 &mt LCTRL F4 &mt LALT F5  &kp F6       &kp LGUI      &kp RGUI       &bt BT_SEL 4 &kp RALT     &kp RCTRL    &kp RSHIFT */
        /*     &kp F12        &kp F1       &kp F2       &kp F3       &trans        &bt BT_SEL 0   &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &trans */
        /*                                              &kp TAB      &trans        &kp ENTER      &kp BSPC */
        /*     >; */
        /* }; */
    };
};
